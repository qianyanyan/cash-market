<template>
    <div>
        <el-col :span="24" class="toolbar" style="padding-bottom: 0px;">
<el-form :inline="true" :model="filters">
    <el-form-item>
        <!--<el-button type="primary" @click="handleAdd" v-if="createShow">新增</el-button>-->
        <el-button type="primary" @click="handleAdd">新增</el-button>
    </el-form-item>
    <el-form-item>
        <el-select v-model="filters.value" placeholder="请选择状态">
            <el-option v-for="item in filters.options" :key="item.value" :label="item.label" :value="item.value">
            </el-option>
        </el-select>
    </el-form-item>
    <el-form-item>
        <el-date-picker v-model="startDate" type="date" format="yyyy-MM-dd" placeholder="选择开始日期" :picker-options="startPickerOptions">
        </el-date-picker>
    </el-form-item>
    <el-form-item>
        <el-date-picker v-model="endDate" type="date" format="yyyy-MM-dd" placeholder="选择结束日期" :picker-options="endPickerOptions">
        </el-date-picker>
    </el-form-item>
    <el-form-item>
        <el-button type="primary" v-on:click="searMerchantAd({adStatus: filters.value,createStartTime: startDate, createEndTime: endDate})">查询</el-button>
    </el-form-item>
    <el-form-item>
        <el-input v-model="search" placeholder="请输入关键字"></el-input>
    </el-form-item>
</el-form>
</el-col>


<el-table ref="singleTable" :data="searchData" highlight-current-row v-loading="listLoading" style="width: 100%">
<el-table-column width="100" property="name" label="广告名称">
</el-table-column>
<el-table-column property="tags" label="标签">
</el-table-column>
<el-table-column property="targetUrl" label="目标路径">
</el-table-column>
<el-table-column property="details" label="备注详情">
</el-table-column>
<el-table-column property="tipType" label="提示类型">
</el-table-column>
<el-table-column property="img1" label="轮播图">
</el-table-column>
<el-table-column property="img2" label="小图像">
</el-table-column>

<el-table-column property="adStatus" label="状态">
    <!--<template scope="scope">-->
    <!--{{scope.row.isShow}}-->
    <!--<el-switch on-text="1" off-text="0" v-model="scope.row.isShow" @cilck="changeStatus()"></el-switch>-->
    <!--</template>-->
</el-table-column>
<el-table-column label="操作" width="150">
    <template scope="scope">
        <el-button size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
        <!--<el-button type="danger" size="small" @click="handleDel(scope.$index, scope.row)">删除</el-button>-->
    </template>
</el-table-column>
</el-table>

<!--编辑界面-->
<el-dialog title="编辑" v-model="editFormVisible" :close-on-click-modal="false">
    <el-form :model="editForm" label-width="80px" :rules="editFormRules" ref="editForm">
        <!--<el-form-item label="广告名称" prop="accounts">
          <el-input v-model="editForm.name" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="标签" prop="password">
          <el-input v-model="editForm.password" auto-complete="off" type="password"></el-input>
        </el-form-item>
        <el-form-item label="状态">
        </el-form-item>-->

        <el-form-item label="广告名称" prop="name">
            <el-input v-model="editForm.name" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="标签" prop="tags">
            <el-input v-model="editForm.tags" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item label="广告列表位置" prop="bannerNo">
            <el-select v-model="editForm.bannerNo" placeholder="请选择广告列表位置">
                <el-option v-for="item in filteradd.options" :key="item.value" :label="item.label" :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>
       

        <el-form-item label="目标路径" prop="targetUrl">
            <el-input v-model="editForm.targetUrl" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item label="备注详情" prop="details">
            <el-input v-model="editForm.details" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item label="提示类型" prop="tipType">
            <el-input v-model="editForm.tipType" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item>
            <el-date-picker v-model="editForm.onlineStart" type="date" format="yyyy-MM-dd" placeholder="选择上线时间" :picker-options="startPickerOptions">
            </el-date-picker>
        </el-form-item>
        <el-form-item>
            <el-date-picker v-model="editForm.onlineEnd" type="date" format="yyyy-MM-dd" placeholder="选择下线时间" :picker-options="endPickerOptions">
            </el-date-picker>
        </el-form-item>

        <el-form-item label="导流商ID">
            <el-select v-model="editForm.merchantId" placeholder="请选择导流商ID">
                <el-option v-for="item in neameIds" :key="item.id" :label="item.comment" :value="item.id">
                </el-option>
            </el-select>
        </el-form-item>
        <el-form-item label="轮播图" prop="img1">
            <el-upload :headers="dataObj" :limit='1' :data="dataObj" action="http://192.168.1.32:8082/engine-console/console/uploadFile/uploadPicture.do"
                list-type="picture-card" :on-preview="handlePictureCardPreview" :on-change="changeimg" :on-remove="handleRemove">
                <i class="el-icon-plus"></i>
            </el-upload>
        </el-form-item>
        <el-form-item label="小图像" prop="img2">
            <el-upload :headers="dataObj" :limit='1' :data="dataObj" action="http://192.168.1.32:8082/engine-console/console/uploadFile/uploadPicture.do"
                list-type="picture-card" :on-preview="handlePictureCardPreview" :on-change="changeimage" :on-remove="handleRemove">
                <i class="el-icon-plus"></i>
            </el-upload>
        </el-form-item>
        <el-form-item label="状态">
            <el-select v-model="editForm.adStatus" placeholder="请选择状态">
                <el-option v-for="item in filters.options" :key="item.value" :label="item.label" :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>
       <el-form-item label="权重">
            <el-select v-model="editForm.weightNo" placeholder="请选择weightNo">
                <el-option v-for="item in weightNos.options" :key="item.value" :label="item.label" :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>


    </el-form>
    <div slot="footer" class="dialog-footer">
        <el-button @click.native="editFormVisible = false">取消</el-button>
        <el-button type="primary" @click.native="editSubmit" :loading="editLoading">提交</el-button>
    </div>
</el-dialog>



<!--新增界面-->
<el-dialog title="新增" v-model="addFormVisible" :close-on-click-modal="false">
    <el-form :model="addForm" label-width="80px" :rules="addFormRules" ref="addForm">
        <el-form-item label="广告名称" prop="name">
            <el-input v-model="addForm.name" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="标签" prop="tags">
            <el-input v-model="addForm.tags" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item label="广告列表位置" prop="bannerNo">
            <!--<el-input v-model="addForm.bannerNo" auto-complete="off" type="text"></el-input>-->
            <el-select v-model="addForm.bannerNo" placeholder="请选择广告列表位置">
                <el-option v-for="item in filteradd.options" :key="item.value" :label="item.label" :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>

        <el-form-item label="目标路径" prop="targetUrl">
            <el-input v-model="addForm.targetUrl" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item label="备注详情" prop="details">
            <el-input v-model="addForm.details" auto-complete="off" type="text"></el-input>
        </el-form-item>
        <el-form-item label="提示类型" prop="tipType">
            <el-input v-model="addForm.tipType" auto-complete="off" type="text"></el-input>
        </el-form-item>

        <el-form-item>
            <el-date-picker v-model="onlineStart" type="date" format="yyyy-MM-dd" placeholder="选择上线时间" :picker-options="startPickerOptions">
            </el-date-picker>
        </el-form-item>
        <el-form-item>
            <el-date-picker v-model="onlineEnd" type="date" format="yyyy-MM-dd" placeholder="选择下线时间" :picker-options="endPickerOptions">
            </el-date-picker>
        </el-form-item>

        <el-form-item label="导流商ID">
            <el-select v-model="relIds" placeholder="请选择导流商ID">
                <el-option v-for="item in neameIds" :key="item.id" :label="item.comment" :value="item.id">
                </el-option>
            </el-select>
        </el-form-item>
        <el-form-item label="轮播图" prop="img1">
            <el-upload :headers="dataObj" :limit='1' :data="dataObj" action="http://192.168.1.32:8080/engine-console/console/uploadFile/uploadPicture.do"
                list-type="picture-card" :on-preview="handlePictureCardPreview" :on-change="changeimg" :on-remove="handleRemove">
                <i class="el-icon-plus"></i>
            </el-upload>
            <!--<el-dialog v-model="dialogVisible" size="tiny">
                    <img width="100%" :src="dialogImageUrl" alt="">
                    </el-dialog>-->
        </el-form-item>
        <el-form-item label="小图像" prop="img2">
            <el-upload :headers="dataObj" :limit='1' :data="dataObj" action="http://192.168.1.32:8080/engine-console/console/uploadFile/uploadPicture.do"
                list-type="picture-card" :on-preview="handlePictureCardPreview" :on-change="changeimage" :on-remove="handleRemove">
                <i class="el-icon-plus"></i>
            </el-upload>
            <!--<el-dialog v-model="dialogVisible" size="tiny">
                    <img width="100%" :src="dialogImageUrl" alt="">
                    </el-dialog>-->
        </el-form-item>

        <!--<el-upload
   :headers= "dataObj"
  :data="dataObj"
  action="http://192.168.1.32:8080/engine-console/console/uploadFile/uploadPicture.do" 
  list-type="picture-card"
  :on-preview="handlePictureCardPreview"
  :on-remove="handleRemove">
  <i class="el-icon-plus"></i>
</el-upload>
<el-dialog v-model="dialogVisible" size="tiny">
  <img width="100%" :src="dialogImageUrl" alt="">
</el-dialog>-->

        <el-form-item label="状态">
            <el-select v-model="adStus" placeholder="请选择状态">
                <el-option v-for="item in filters.options" :key="item.value" :label="item.label" :value="item.value">
                </el-option>
            </el-select>
        </el-form-item>
    </el-form>
    <div slot="footer" class="dialog-footer">
        <el-button @click.native="addFormVisible = false">取消</el-button>
        <el-button type="primary" @click.native="addSubmit" :loading="addLoading">提交</el-button>
    </div>
</el-dialog>

<el-col :span="24" class="toolbar">
    <!--<el-button type="danger" @click="batchRemove" :disabled="this.sels.length===0">批量删除</el-button>-->
    <el-pagination layout="total, sizes, prev, pager, next" @current-change="handleCurrentChange" @size-change="handleSizeChange"
        :page-size="pageSize" :page-sizes="pageSizes" :total="totalPage" style="float:right;">
</el-pagination>
</el-col>

</div>
</template>
<script>
    import { searMerchantAd, modifyUser, removeUser, addUser, searchCMarket, addMerchantAd,updatechCMarket } from '../api/api'
    import global from '../assets/js/global'

    export default {
        data() {
            return {
                totalPage: 0,
                currentPage: 1,
                pageSize: 10,
                pageSizes: [10, 20, 30, 40],
                search: '',
                dialogImageUrl: '',
                dialogVisible: false,
                dataObj: { authorization: sessionStorage.user },
                currentAddStatus: false,
                listLoading: false,
                currentStatus: false,
                logining: false,
                tableData: [],
                neameIds: [],
                relIds: " ",
                tableFData: [],
                // 编辑界面是否显示
                editFormVisible: false,
                editLoading: false,
                editFormRules: {
                    accounts: [
                        { required: true, message: '请输入姓名', trigger: 'blur' }
                    ],
                    password: [
                        { required: true, message: '请输入密码', trigger: 'blur' }
                    ]
                },
                // 编辑界面数据
                editForm: {},
                // 编辑界面临时存放数据，用于比较是否有修改
                editFormContainer: {},
                // 新增界面是否显示
                addFormVisible: false,
                addLoading: false,
                addFormRules: {
                    accounts: [
                        { required: true, message: '请输入姓名', trigger: 'blur' }
                    ],
                    password: [
                        { required: true, message: '请输入密码', trigger: 'blur' }
                    ]
                },
                // 新增界面数据
                addForm: {},
                filters: {
                    value: '',
                    options: [{
                        value: 'I',
                        label: '待处理'
                    }, {
                        value: 'W',
                        label: ' 待上架'
                    }, {
                        value: 'ON',
                        label: ' 已上架'
                    }, {
                        value: 'OFF',
                        label: '已下架'
                    }]
                },
                filteradd: {
                    options: [{
                        value: '0',
                        label: '0'
                    }, {
                        value: '10',
                        label: ' 10'
                    }, {
                        value: '20',
                        label: '20'
                    }, {
                        value: '30',
                        label: '30'
                    }]
                },
                weightNos: {
                    options: [{
                        value: '0',
                    }, {
                        value: '10',
                    }, {
                        value: '20',
                    }, {
                        value: '30',
                        
                    }]
                },
                startPickerOptions: {
                    disabledDate(time) {
                        return ''
                    }
                },
                startDate: '',
                endPickerOptions: {
                    disabledDate(time) {
                        return ''
                    }
                },
                endDate: '',
                createShow: false,
                modifyShow: false,
                deleteShow: false,
                merchantId: 1,
                adStus: "ON",
                onlineEnd: "",
                onlineStart: "",

            }
        },
        components: {},
        mounted() {
            let userParams = {
                adStatus: '',
                createStartTime: '',
                createEndTime: ''
            }
            this.searMerchantAd(userParams)
            this.createShow = global.judgePermissionName('user:create', this.$store.getters.getPermissionName)
            this.modifyShow = global.judgePermissionName('user:modify', this.$store.getters.getPermissionName)
            this.deleteShow = global.judgePermissionName('user:delete', this.$store.getters.getPermissionName)
        },
        computed: {
            searchData() {
                var search = this.search;
                if (search) {
                    return this.tableFData.filter(function (item) {
                        return Object.keys(item).some(function (key) {
                            return String(item[key]).toLowerCase().indexOf(search) > -1
                        })
                    })
                }
                return this.tableFData;
            }
        },
        methods: {
            changeimg(file, fileList) {
                console.log(file)
                console.log(fileList)
                // this.dialogVisible = true;   
            },
            changeimage(file, fileList) {
                console.log(file.response.data)
                this.img2 = file.response.data;
                console.log(fileList)
                // this.dialogVisible = true;   
            },

            handleRemove(file, fileList) {
                console.log(file, fileList);
            },
            handlePictureCardPreview(file) {
                this.dialogImageUrl = file.url;
                console.log(file.url)
                this.dialogVisible = true;
            },
            searMerchantAd(userParams) {
                let vm = this
                if (typeof userParams.createStartTime == 'object') {
                    userParams.createStartTime = Date.parse(userParams.startCreatetime)
                }
                if (typeof userParams.createEndTime == 'object') {
                    userParams.createEndTime = Date.parse(userParams.endCreatetime)
                }
                searMerchantAd(userParams).then(data => {
                    if (data.data.code === 200) {
                        vm.totalPage = data.data.total
                        vm.tableData = data.data.data
                        for (var i = 0; i < vm.tableData.length; i++) {
                            //   vm.tableData[i].adStatus = vm.tableData[i].adStatus == 'ON' ? '启用' : '禁用'
                            let state = vm.tableData[i].adStatus;
                            switch (state) {
                                case 'I':
                                    vm.tableData[i].adStatus = '待处理';
                                    break;
                                case 'ON':
                                    vm.tableData[i].adStatus = '已上架';
                                    break;
                                case 'W':

                                    vm.tableData[i].adStatus = '待上架';
                                    break;
                                case 'OFF':
                                    vm.tableData[i].adStatus = '已下架';
                                    break;
                                default:
                                // System.out.println("other");
                            }
                        }
                        vm.fPage(vm.tableData)
                    }
                })
            },
            fPage(list) {
                this.tableFData = list.slice((this.currentPage - 1) * 10, (this.currentPage - 1) * 10 + this.pageSize)
            },
            handleCurrentChange(val) {
                this.currentPage = val
                this.fPage(this.tableData)
            },
            handleSizeChange(size) {
                this.pageSize = size
                this.fPage(this.tableData)
            },
            // 显示编辑界面
            handleEdit(index, row) {
                this.editFormVisible = true
                this.editForm = Object.assign({}, row);
                this.editFormContainer = Object.assign({}, row);
                this.editForm.bannerNo= this.editForm.bannerNo ? this.editForm.bannerNo:0;
                // this.editFormContainer.currentStatus = this.currentStatus = row.status == '启用'
            },
            // 显示新增界面
            handleAdd() {
                this.addFormVisible = true
                this.searchCMarket()
            },
            searchCMarket() {
                let self = this;
                searchCMarket().then(data => {
                    if (data.data.code === 200) {
                        self.neameIds = data.data.data;


                    }
                })
            },
            //   handleDel (index, row) {
            //     this.$confirm('确认删除该记录吗?', '提示', {
            //       type: 'warning'
            //     }).then(() => {
            //       this.listLoading = true
            //       let arr = []
            //       arr.push(row.id)
            //       let para = { ids: arr }
            //       removeUser(para).then((data) => {
            //         this.listLoading = false
            //         if (data.data.code == 200 && data.data.message.toLowerCase() == 'ok') {
            //           this.$message({
            //             message: '删除成功',
            //             type: 'success'
            //           })
            //           this.searMerchantAd({
            //             adStatus: this.filters.value,
            //             createStartTime: this.startDate,
            //             createEndTime: this.endDate
            //           })
            //         } else {
            //           this.$message({
            //             message: data.data.message,
            //             type: 'error'
            //           })
            //         }
            //       })
            //     })
            //   },
            // 编辑
            editSubmit() {
                this.$refs.editForm.validate((valid) => {
                    if (valid) {
                        this.$confirm('确认提交吗？', '提示', {}).then(() => {
                            this.editLoading = true
                            if (this.editFormContainer.id == this.editForm.id && this.editFormContainer.accounts == this.editForm.accounts && this.editFormContainer.password == this.editForm.password && this.editFormContainer.currentStatus == this.currentStatus) {
                                this.editFormVisible = this.editLoading = false
                                this.$refs['editForm'].resetFields()
                                this.$message({
                                    message: '编辑数据不能与原数据相同',
                                    type: 'error'
                                })
                            } else {
                                 if (typeof this.onlineEnd == 'object') {
                                    this.onlineEnd = Date.parse(this.onlineEnd)
                                }
                                if (typeof this.onlineStart == 'object') {
                                    this.onlineStart = Date.parse(this.onlineStart)
                                }
                                let userParams = {
                                    name: this.addForm.name,
                                    tags: this.addForm.tags,
                                    targetUrl: this.addForm.targetUrl,
                                    details: this.addForm.details,
                                    tipType: this.addForm.tipType,
                                    onlineEndVO: this.onlineEnd,
                                    onlineStartVO: this.onlineStart,
                                    merchantId: this.relIds,
                                    img1: this.img1,
                                    img2: this.img2,
                                    adStatus: filters.value,
                                }
                                updatechCMarket(userParams).then(data => {
                                    this.editFormVisible = this.editLoading = false
                                    this.$refs['editForm'].resetFields()
                                    if (data.data.code == 200 && data.data.message.toLowerCase() == 'ok') {
                                        this.$message({
                                            message: '提交成功',
                                            type: 'success'
                                        })
                                        this.searMerchantAd({ status: this.filters.value, createStartTime: this.startDate, createEndTime: this.endDate })
                                    } else {
                                        this.$message({
                                            message: data.data.message,
                                            type: 'error'
                                        })
                                    }
                                })
                            }
                        })
                    } else {
                        console.log('error submit!!')
                        return false
                    }
                })
            },
            // 新增
            addSubmit() {
                this.$refs.addForm.validate((valid) => {
                    if (valid) {
                        this.$confirm('确认提交吗？', '提示', {}).then(() => {
                            this.addLoading = true
                            //   let addUserParams = this.addForm
                            if (typeof this.onlineEnd == 'object') {
                                this.onlineEnd = Date.parse(this.onlineEnd)
                            }
                            if (typeof this.onlineStart == 'object') {
                                this.onlineStart = Date.parse(this.onlineStart)
                            }
                            let userParams = {
                                name: this.addForm.name,
                                tags: this.addForm.tags,
                                bannerNo: this.addForm.bannerNo,
                                targetUrl: this.addForm.targetUrl,
                                details: this.addForm.details,
                                tipType: this.addForm.tipType,
                                merchantId: this.relIds,
                                img1: this.img1,
                                img2: this.img2,
                                adStatus: this.adStus,
                                onlineEndVO: this.onlineEnd,
                                onlineStartVO: this.onlineStart,

                            }
                            //   addUserParams.adStatus = this.currentAddStatus ? 0 : 1
                            addMerchantAd(userParams).then((data) => {
                                this.addLoading = this.addFormVisible = false
                                this.$refs['addForm'].resetFields()
                                if (data.data.code == 200 && data.data.message.toLowerCase() == 'ok') {
                                    this.$message({
                                        message: '提交成功',
                                        type: 'success'
                                    })
                                    this.searMerchantAd()
                                } else {
                                    this.$message({
                                        message: data.data.message,
                                        type: 'error'
                                    })
                                }
                            })
                        })
                    }
                })
            }
        }
    }

</script>

<style lang="less" rel="stylesheet/less" scoped>
  body {
    margin: 0px;
    padding: 0px;
    font-family: Helvetica Neue, Helvetica, PingFang SC, Hiragino Sans GB, Microsoft YaHei, SimSun, sans-serif;
    font-size: 14px;
    -webkit-font-smoothing: antialiased;
  }
  #app {
    position: absolute;
    top: 0px;
    bottom: 0px;
    width: 100%;
  }
  .el-submenu [class^=fa] {
    vertical-align: baseline;
    margin-right: 10px;
  }
  .el-menu-item [class^=fa] {
    vertical-align: baseline;
    margin-right: 10px;
  }
  .toolbar {
    padding: 10px;
    margin: 10px 0px;
  }
  .toolbar .el-form-item {
    margin-bottom: 10px;
  }
  .fade-enter-active,
  .fade-leave-active {
    transition: all .2s ease;
  }
  .fade-enter,
  .fade-leave-active {
    opacity: 0;
  }
</style>